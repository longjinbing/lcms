package ${package}.service.impl;

import com.ljb.Base.BaseServiceImpl;
import com.ljb.utils.*;
import com.ljb.model.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Map;
import com.alibaba.fastjson.JSONObject;
import javax.servlet.http.HttpServletResponse;
import ${package}.dao.${entityName}Dao;
import ${package}.entity.${entityName};
import ${package}.service.${entityName}Service;

/**
 * ${comment}Service实现类
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Service
public class ${entityName}ServiceImpl extends BaseServiceImpl implements ${entityName}Service {
    @Autowired
    private ${entityName}Dao ${variableName}Dao;

    @Override
    public PageUtils selectList(Map<String, Object> map) {
        Query query = new Query(map);
        List<Map<String, Object>> list = ${variableName}Dao.selectMapList(query);
        Long total = ${variableName}Dao.selectTotal(query);
        PageUtils pageUtils = new PageUtils(list, total, query.getOffset(), query.getLimit());
        return pageUtils;
    }

    @Override
    public ${entityName} selectById(${pk.dataType} id) {
        return ${variableName}Dao.selectById(id);
    }

    @Override
    public Map<String,Object> selectMapById(${pk.dataType} id) {
        return ${variableName}Dao.selectMapById(id);
    }

    @Override
    public int deleteBatch(List<${pk.dataType}> ids) {
        return ${variableName}Dao.deleteBatchIds(ids);
    }

    @Override
    public int save(${entityName} entity) {
        return ${variableName}Dao.insert(entity);
    }

    @Override
    public int update(${entityName} entity) {
        return ${variableName}Dao.updateByIdSelective(entity);
    }

    @Override
    public void export(JSONObject jsonObject, HttpServletResponse response){
        ExportParams exportParams=new ExportParams(jsonObject);
        List<Map<String, Object>> list = ${variableName}Dao.selectMapList(exportParams.getQueryParams());
        byte[] data=ExcelUtils.exportFile(exportParams.getSelectedFields(), list);
        ResponseUtils.responseFile(response, "${comment}.xlsx", data);
    }
}
