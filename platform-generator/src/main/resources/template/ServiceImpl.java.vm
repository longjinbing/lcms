package ${package}.service.impl;

import com.ljb.security.IdentityUtils;
import com.ljb.utils.DateUtils;
import com.ljb.utils.PageUtils;
import com.ljb.utils.Query;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Map;
import ${package}.dao.${className}Dao;
import ${package} .entity.${className};
import ${package}.service.${className}Service;
import ${package}.example.${className}Example;

/**
 * ${comments}Service实现类
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Service
public class ${className}ServiceImpl implements ${className}Service<${className},${pk.attrType}, ${className}Example> {
    @Autowired
    private ${className}Dao ${classname}Dao;

    @Override
    public PageUtils selectList(Map<String, Object> map) {
        Query query = new Query(map);
        List<Map<String, Object>> list = ${classname}Dao.selectMapList(query);
        Long total = ${classname}Dao.selectCount(query);
        PageUtils pageUtils = new PageUtils(list, total, query.getOffset(), query.getLimit());
        return pageUtils;
    }

    @Override
    public ${className} selectById(Integer id) {
        return ${classname}Dao.selectByPrimaryKey(id);
    }

    @Override
    public Map<String,Object> selectMapById(Integer id) {
        return ${classname}Dao.selectMapById(id);
    }

    @Override
    public int deleteBatch(Object[] ids) {
        return ${classname}Dao.deleteBatch(ids);
    }

    @Override
    public int save(${className} entity) {
        #foreach($column in $columns)
            #if($column.attrname == "createId" )
                entity.setCreateId(IdentityUtils.getUserId());
            #end
            #if($column.attrname == "createTime" )
                entity.setCreateTime(DateUtils.currentTime());
            #end
        #end
        return ${classname}Dao.insert(entity);
    }

    @Override
    public int update(${className} entity) {
        #foreach($column in $columns)
            #if($column.attrname == "updateId" )
                entity.setUpdateId(IdentityUtils.getUserId());
            #end
            #if($column.attrname == "updateTime" )
                entity.setUpdateTime(DateUtils.currentTime());
            #end
        #end
        return ${classname}Dao.updateByPrimaryKeySelective(entity);
    }

}
